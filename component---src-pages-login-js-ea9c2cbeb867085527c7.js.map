{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack:///./node_modules/react-transition-group/esm/config.js","webpack:///./node_modules/react-transition-group/esm/TransitionGroupContext.js","webpack:///./node_modules/react-transition-group/esm/Transition.js","webpack:///./node_modules/react-transition-group/esm/SwitchTransition.js","webpack:///./node_modules/react-transition-group/node_modules/dom-helpers/esm/removeClass.js","webpack:///./node_modules/react-transition-group/esm/CSSTransition.js","webpack:///./node_modules/react-transition-group/node_modules/dom-helpers/esm/addClass.js","webpack:///./node_modules/react-transition-group/node_modules/dom-helpers/esm/hasClass.js","webpack:///./src/pages/login.js"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","createContext","UNMOUNTED","EXITED","ENTERING","ENTERED","_React$Component","Transition","props","context","_this","call","this","initialStatus","appear","isMounting","enter","appearStatus","unmountOnExit","mountOnEnter","state","status","nextCallback","getDerivedStateFromProps","_ref","prevState","_proto","componentDidMount","updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","cancelNextCallback","getTimeouts","exit","timeout","undefined","mounting","node","findDOMNode","performEnter","performExit","setState","_this2","appearing","timeouts","enterTimeout","config","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExit","onExiting","onExited","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","doesNotHaveTimeoutOrListener","addEndListener","setTimeout","render","_this$props","children","childProps","createElement","TransitionGroupContext","Provider","value","child","Children","only","cloneElement","Component","noop","contextType","propTypes","defaultProps","EXITING","_leaveRenders","_enterRenders","modes","callHook","element","name","cb","_element$props","apply","arguments","leaveRenders","current","changeState","_ref2","enterRenders","_ref3","_ref4","SwitchTransition","_len","length","args","Array","_key","concat","appeared","mode","oldChildren","newChildren","isValidElement","key","component","_this$state","data","replaceClassName","origClass","classToRemove","replace","RegExp","classes","split","forEach","c","className","classList","remove","setAttribute","baseVal","CSSTransition","appliedClasses","removeClasses","addClass","type","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","phase","scrollTop","add","contains","indexOf","hasClass","_addClass","_this$appliedClasses$","base","done","LoginPage","setValue","useState","enteredSuccessfully","setEnteredSuccessfully","onChange","e","target","password","passwordInput","useEffect","success","handleLogin","navigate","title","addEventListener"],"mappings":"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","file":"component---src-pages-login-js-ea9c2cbeb867085527c7.js","sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","export default {\n  disabled: false\n};","import React from 'react';\nexport default React.createContext(null);","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props[\"in\"]) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref[\"in\"];\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  }; // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props[\"in\"]) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n      var node = ReactDOM.findDOMNode(this);\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(node, mounting);\n      } else {\n        this.performExit(node);\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(node, mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(node);\n      });\n      return;\n    }\n\n    this.props.onEnter(node, appearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(node, appearing);\n\n      _this2.onTransitionEnd(node, enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(node, appearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit(node) {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(node);\n      });\n      return;\n    }\n\n    this.props.onExit(node);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(node);\n\n      _this3.onTransitionEnd(node, timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(node);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {\n    this.setNextCallback(handler);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      this.props.addEndListener(node, this.nextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\"]); // filter props for Transtition\n\n\n    delete childProps[\"in\"];\n    delete childProps.mountOnEnter;\n    delete childProps.unmountOnExit;\n    delete childProps.appear;\n    delete childProps.enter;\n    delete childProps.exit;\n    delete childProps.timeout;\n    delete childProps.addEndListener;\n    delete childProps.onEnter;\n    delete childProps.onEntering;\n    delete childProps.onEntered;\n    delete childProps.onExit;\n    delete childProps.onExiting;\n    delete childProps.onExited;\n\n    if (typeof children === 'function') {\n      // allows for nested Transitions\n      return React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, children(status, childProps));\n    }\n\n    var child = React.Children.only(children);\n    return (// allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, React.cloneElement(child, childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  \"in\": PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * Normally a component is not transitioned if it is shown when the\n   * `<Transition>` component mounts. If you want to transition on the first\n   * mount set `appear` to `true`, and the component will transition in as soon\n   * as the `<Transition>` mounts.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. **Note:** Timeouts are still used as a fallback if provided.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func // Name the function so it is clearer in the documentation\n\n} : {};\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  \"in\": false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = 0;\nTransition.EXITED = 1;\nTransition.ENTERING = 2;\nTransition.ENTERED = 3;\nTransition.EXITING = 4;\nexport default Transition;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\n\nvar _leaveRenders, _enterRenders;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ENTERED, ENTERING, EXITING } from './Transition';\nimport TransitionGroupContext from './TransitionGroupContext';\n\nfunction areChildrenDifferent(oldChildren, newChildren) {\n  if (oldChildren === newChildren) return false;\n\n  if (React.isValidElement(oldChildren) && React.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Enum of modes for SwitchTransition component\n * @enum { string }\n */\n\n\nexport var modes = {\n  out: 'out-in',\n  \"in\": 'in-out'\n};\n\nvar callHook = function callHook(element, name, cb) {\n  return function () {\n    var _element$props;\n\n    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);\n    cb();\n  };\n};\n\nvar leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function (_ref) {\n  var current = _ref.current,\n      changeState = _ref.changeState;\n  return React.cloneElement(current, {\n    \"in\": false,\n    onExited: callHook(current, 'onExited', function () {\n      changeState(ENTERING, null);\n    })\n  });\n}, _leaveRenders[modes[\"in\"]] = function (_ref2) {\n  var current = _ref2.current,\n      changeState = _ref2.changeState,\n      children = _ref2.children;\n  return [current, React.cloneElement(children, {\n    \"in\": true,\n    onEntered: callHook(children, 'onEntered', function () {\n      changeState(ENTERING);\n    })\n  })];\n}, _leaveRenders);\nvar enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function (_ref3) {\n  var children = _ref3.children,\n      changeState = _ref3.changeState;\n  return React.cloneElement(children, {\n    \"in\": true,\n    onEntered: callHook(children, 'onEntered', function () {\n      changeState(ENTERED, React.cloneElement(children, {\n        \"in\": true\n      }));\n    })\n  });\n}, _enterRenders[modes[\"in\"]] = function (_ref4) {\n  var current = _ref4.current,\n      children = _ref4.children,\n      changeState = _ref4.changeState;\n  return [React.cloneElement(current, {\n    \"in\": false,\n    onExited: callHook(current, 'onExited', function () {\n      changeState(ENTERED, React.cloneElement(children, {\n        \"in\": true\n      }));\n    })\n  }), React.cloneElement(children, {\n    \"in\": true\n  })];\n}, _enterRenders);\n/**\n * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).\n * You can use it when you want to control the render between state transitions.\n * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.\n *\n * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.\n * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child\n *\n * ```jsx\n *\n * function App() {\n *  const [state, setState] = useState(false);\n *  return (\n *    <SwitchTransition>\n *      <FadeTransition key={state ? \"Goodbye, world!\" : \"Hello, world!\"}\n *        addEndListener={(node, done) => node.addEventListener(\"transitionend\", done, false)}\n *        classNames='fade' >\n *        <button onClick={() => setState(state => !state)}>\n *          {state ? \"Goodbye, world!\" : \"Hello, world!\"}\n *        </button>\n *      </FadeTransition>\n *    </SwitchTransition>\n *  )\n * }\n * ```\n */\n\nvar SwitchTransition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(SwitchTransition, _React$Component);\n\n  function SwitchTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = {\n      status: ENTERED,\n      current: null\n    };\n    _this.appeared = false;\n\n    _this.changeState = function (status, current) {\n      if (current === void 0) {\n        current = _this.state.current;\n      }\n\n      _this.setState({\n        status: status,\n        current: current\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = SwitchTransition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.appeared = true;\n  };\n\n  SwitchTransition.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    if (props.children == null) {\n      return {\n        current: null\n      };\n    }\n\n    if (state.status === ENTERING && props.mode === modes[\"in\"]) {\n      return {\n        status: ENTERING\n      };\n    }\n\n    if (state.current && areChildrenDifferent(state.current, props.children)) {\n      return {\n        status: EXITING\n      };\n    }\n\n    return {\n      current: React.cloneElement(props.children, {\n        \"in\": true\n      })\n    };\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        mode = _this$props.mode,\n        _this$state = this.state,\n        status = _this$state.status,\n        current = _this$state.current;\n    var data = {\n      children: children,\n      current: current,\n      changeState: this.changeState,\n      status: status\n    };\n    var component;\n\n    switch (status) {\n      case ENTERING:\n        component = enterRenders[mode](data);\n        break;\n\n      case EXITING:\n        component = leaveRenders[mode](data);\n        break;\n\n      case ENTERED:\n        component = current;\n    }\n\n    return React.createElement(TransitionGroupContext.Provider, {\n      value: {\n        isMounting: !this.appeared\n      }\n    }, component);\n  };\n\n  return SwitchTransition;\n}(React.Component);\n\nSwitchTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Transition modes.\n   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.\n   * `in-out: New element transitions in first, then when complete, the current element transitions out.`\n   *\n   * @type {'out-in'|'in-out'}\n   */\n  mode: PropTypes.oneOf([modes[\"in\"], modes.out]),\n\n  /**\n   * Any `Transition` or `CSSTransition` component\n   */\n  children: PropTypes.oneOfType([PropTypes.element.isRequired])\n} : {};\nSwitchTransition.defaultProps = {\n  mode: modes.out\n};\nexport default SwitchTransition;","import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\n\nfunction replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    ;\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](http://www.nganimate.org/) library, you should use it if you're\n * using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (node, appearing) {\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(node, appearing);\n      }\n    };\n\n    _this.onEntering = function (node, appearing) {\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(node, appearing);\n      }\n    };\n\n    _this.onEntered = function (node, appearing) {\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(node, appearing);\n      }\n    };\n\n    _this.onExit = function (node) {\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(node);\n      }\n    };\n\n    _this.onExiting = function (node) {\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(node);\n      }\n    };\n\n    _this.onExited = function (node) {\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(node);\n      }\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    if (type === 'appear' && phase === 'done') {\n      className += \" \" + this.getClassNames('enter').doneClassName;\n    } // This is for to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    this.appliedClasses[type][phase] = className;\n\n    _addClass(node, className);\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided and it\n   * will be suffixed for each stage: e.g.\n   *\n   * `classNames=\"fade\"` applies `fade-appear`, `fade-appear-active`,\n   * `fade-appear-done`, `fade-enter`, `fade-enter-active`, `fade-enter-done`,\n   * `fade-exit`, `fade-exit-active`, and `fade-exit-done`.\n   *\n   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.\n   * This allows you to define different behavior for when appearing is done and\n   * when regular entering is done, using selectors like\n   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an\n   * epic entrance animation when element first appears in the DOM using\n   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   * simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","import hasClass from './hasClass';\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","import \"core-js/modules/es6.array.index-of\";\nexport default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}","import React, { useEffect, useState } from 'react';\nimport { Link, navigate } from 'gatsby';\nimport { SwitchTransition, CSSTransition } from 'react-transition-group';\nimport './login.css';\n\nimport { handleLogin } from '../services/auth';\nimport SEO from '../components/seo';\n\nfunction useInput() {\n  const [value, setValue] = useState('');\n  const input = (\n    <input type=\"text\" onChange={e => setValue(e.target.value)} value={value} />\n  );\n\n  return [value, input];\n}\n\nconst LoginPage = () => {\n  const [enteredSuccessfully, setEnteredSuccessfully] = useState(false);\n  const [password, passwordInput] = useInput();\n\n  useEffect(() => {\n    const success = handleLogin({\n      password: password,\n    });\n\n    if (success) {\n      setEnteredSuccessfully(success);\n      setTimeout(() => {\n        navigate(`/`);\n      }, 2000);\n    }\n  }, [password]);\n\n  return (\n    <>\n      <SEO title=\"Login\" />\n      <SwitchTransition>\n        <CSSTransition\n          key={enteredSuccessfully ? 'success' : 'password'}\n          addEndListener={(node, done) =>\n            node.addEventListener('transitionend', done, false)\n          }\n          classNames=\"fade\"\n        >\n          {enteredSuccessfully ? <span>success!</span> : passwordInput}\n        </CSSTransition>\n      </SwitchTransition>\n    </>\n  );\n};\n\nexport default LoginPage;\n"],"sourceRoot":""}